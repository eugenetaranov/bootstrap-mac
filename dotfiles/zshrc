# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

unsetopt share_history

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=$HOME/.tfenv/bin:/opt/homebrew/opt/mysql-client/bin:/opt/homebrew/bin:~/Library/Application\ Support/JetBrains/Toolbox/scripts/:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git terraform kubectl zsh-fzf-history-search aws wd)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export EDITOR='vim'

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias zshconfig="vim ~/.zshrc"
alias gcm="git checkout master && git pull"
alias cda="cd ~/projects/alice"

alias kev='kubectl get events --sort-by=.metadata.creationTimestamp'
alias kgn='kubectl get nodes --sort-by=.metadata.creationTimestamp'
alias kdn='kubectl describe node'

# source ~/.powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Terraform
export TFENV_ARCH=amd64
export TF_PLUGIN_CACHE_DIR=~/.terraform.d/plugin-cache

[ ! -d "$TF_PLUGIN_CACHE_DIR" ] && mkdir -p "$TF_PLUGIN_CACHE_DIR"

function git-make-branch() {
  # Check if an argument is provided
  if [[ -z "$1" ]]; then
    echo "Usage: git make-branch <ticket-URL-or-ID>"
    return 1
  fi

  # Extract ticket ID from the input
  local input="$1"
  local ticket_id

  if [[ "$input" =~ ^https?:// ]]; then
    # Extract the ticket ID from the URL (e.g., DEVOPS-5698 from a URL)
    ticket_id=$(echo "$input" | grep -oE '[A-Z]+-[0-9]+')
    if [[ -z "$ticket_id" ]]; then
      echo "Error: Could not extract ticket ID from URL"
      return 1
    fi
  else
    # Assume input is already a ticket ID
    ticket_id="$input"
  fi

  # Prompt for a branch name
  read "branch_name?Enter branch name: "
  if [[ -z "$branch_name" ]]; then
    echo "Error: Branch name cannot be empty"
    return 1
  fi

  # Combine ticket ID and branch name with a delimiter (e.g., "/")
  local new_branch="${ticket_id,,}/${branch_name// /-}"  # Lowercase ticket ID and replace spaces with dashes

  # Create and check out the new branch
  git checkout -b "$new_branch" && echo "Switched to new branch '$new_branch'"
}

function k8s_config_switch () {
  KUBECONFIG=$(find ~/.kube/alice -type f -exec /opt/homebrew/Cellar/coreutils/9.5/libexec/gnubin/realpath --relative-to ~/.kube/ {} \; | fzf)
  echo "Configuring k8s cluster ${KUBECONFIG}"
  export KUBECONFIG=~/.kube/${KUBECONFIG}
}

function kgnami () {
  kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.providerID}{"\n"}{end}' | while read -r node providerID; do
    instance_id=$(echo $providerID | awk -F'/' '{print $NF}')
    ami_id=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[*].Instances[*].ImageId' --output text)
    echo "Node: $node, AMI ID: $ami_id"
  done
}

function openssl_info_text () {
  openssl x509 -text -noout -in $1
}

function openssl_connect () {
  openssl s_client -showcerts -servername ${1}  -connect ${1}:443
}

function default_branch_git {
  default_branch=$(git rev-parse --abbrev-ref origin/HEAD | sed 's/origin\///') 
  git checkout $default_branch
  git pull
}

function fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

function keit() {
  kubectl exec -ti "$1" -- bash
}



function recent_branches () {
#  git for-each-ref --count=1000 --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))' | fzf
    ~/Dropbox/mac/scripts/recent_branches.py
}

function upload_rundeck () {
  echo "Syncing rundeck/job_resources to rundeck.aliceapp.com"
  sleep 2
  rsync -avz --progress --rsync-path="sudo rsync" ~/projects/alice/repos/rundeck/job_resources/ rundeck.aliceapp.com:/opt/rundeck-jobs/job_resources/
}


function tfreset() {
    echo "Cleaning up .terraform and .terraform.lock.hcl ..."
    rm -fr .terraform .terraform.lock.hcl

    terraform init -upgrade

    workspaces=$(terraform workspace list | awk '{print $1}')

    if [[ $# -eq 1 ]]; then
        selected_workspace=$1
    else
        selected_workspace=$(echo "$workspaces" | fzf --prompt="Select Terraform workspace: ")
    fi

    # If no workspace is selected, exit
    [[ -z $selected_workspace ]] && echo "No workspace selected. Exiting." && return 1

    terraform workspace select "$selected_workspace"
}

function alice-env-delay() {
  echo -n "Enter the environment name: "
  read env_name

  echo -n "Enter the delay in hours: "
  read delay_hours

  # Validate the delay_hours input
  if [[ -z "$delay_hours" || ! "$delay_hours" =~ ^[0-9]+$ ]]; then
    echo "Please provide a valid integer as the delay in hours."
    return 1
  fi

  ssm_parameter="/${env_name}/common/environment_shutdown_delayed"

  # Calculate the delayed datetime in ISO 8601 format (UTC)
  local delayed_datetime=$(date -u -v +${delay_hours}H +"%Y-%m-%dT%H:%MZ")
  echo "Delaying shutdown of ${env_name} till ${delayed_datetime}"
  echo "Updating ssm parameter ${ssm_parameter}"
  sleep 2

  # Update the SSM parameter
  aws ssm put-parameter --name ${ssm_parameter} --value "$delayed_datetime" --type "String" --overwrite

  if [[ $? -eq 0 ]]; then
    echo "SSM parameter ${ssm_parameter} updated successfully: $delayed_datetime"
  else
    echo "Failed to update the SSM parameter."
    return 1
  fi
}

function tf-format() {
  find . -type d -exec sh -c '
    cd "$0" &&
    if [ -n "$(find . -maxdepth 1 -name "*.tf")" ]; then
      terraform fmt
    fi
  ' {} \;
}

eval "$(direnv hook zsh)"
eval "$(pyenv init -)"

complete -C aws_completer aws

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

autoload -Uz compinit
zstyle ':completion:*' menu select
fpath+=~/.zfunc

function kgpf() {
    # Use kubectl to get the full list of pods with details, then filter based on keywords
    keywords="$*"
    result=$(kubectl get pods)  # Get the full list of pods with details

    for keyword in $keywords; do
        result=$(echo "$result" | grep -i "$keyword")  # Filter the result for each keyword
    done

    echo "$result"  # Print the filtered result
}

#function aws-ssm-connect() {
#  # Fetch EC2 instance details
#  instances=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`].Value | [0]]' --output text)
#  
#  # Format the instances list and pass to fzf for selection
#  selected_instance=$(echo "$instances" | awk '{print $1 "\t" $3 "\t" $2}' | fzf --header="Select an EC2 instance" --prompt="Instance: ")
#
#  # Extract the instance ID, Name tag, and Private IP from the selected line
#  instance_id=$(echo "$selected_instance" | awk '{print $1}')
#  instance_name=$(echo "$selected_instance" | awk '{print $2}')
#  
#  if [ -n "$instance_id" ]; then
#    # Print connection details in yellow
#    if [ -n "$instance_name" ]; then
#      echo -e "\033[1;33mConnecting to Instance ID: $instance_id, Name: $instance_name\033[0m"
#    else
#      echo -e "\033[1;33mConnecting to Instance ID: $instance_id (no Name tag)\033[0m"
#    fi
#
#    # Start the SSM session with the selected instance
#    aws ssm start-session --target "$instance_id"
#  else
#    echo "No instance selected. Exiting."
#  fi
#}

function aws-ssm-connect() {
  local instance_name="$1"

  # Fetch EC2 instance details
  instances=$(aws ec2 describe-instances \
    --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`].Value | [0]]' \
    --output text)

  if [ -n "$instance_name" ]; then
    # Find instance by name
    selected_instance=$(echo "$instances" | awk -v name="$instance_name" '$3 == name {print $1 "\t" $3 "\t" $2}')
    if [ -z "$selected_instance" ]; then
      echo -e "\033[1;31mNo instance found with Name: $instance_name\033[0m"
      return 1
    fi
  else
    # Interactive selection with fzf if no name provided
    selected_instance=$(echo "$instances" | awk '{print $1 "\t" $3 "\t" $2}' | \
      fzf --header="Select an EC2 instance" --prompt="Instance: ")
  fi

  # Extract instance details
  instance_id=$(echo "$selected_instance" | awk '{print $1}')
  instance_name=$(echo "$selected_instance" | awk '{print $2}')

  if [ -n "$instance_id" ]; then
    if [ -n "$instance_name" ]; then
      echo -e "\033[1;33mConnecting to Instance ID: $instance_id, Name: $instance_name\033[0m"
    else
      echo -e "\033[1;33mConnecting to Instance ID: $instance_id (no Name tag)\033[0m"
    fi
    aws ssm start-session --target "$instance_id"
  else
    echo -e "\033[1;31mNo instance selected. Exiting.\033[0m"
  fi
}

function aws-list-rds() {
  aws rds describe-db-clusters --query 'DBClusters[*].[DBClusterIdentifier,Endpoint]' --output table | fzf
}

function aws-ec2-list() {
  # Fetch EC2 instance details
  instances=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, PublicIpAddress, PrivateIpAddress, Tags[?Key==`Name`].Value | [0]]' --output text)
  
  # Format the instances list and pass to fzf for selection
  selected_instance=$(echo "$instances" | awk '{print $1 "\t" $4 "\t" $2 "\t" $3}' | fzf --header="Select an EC2 instance" --prompt="Instance: ")

  # Extract instance details from the selected line
  instance_id=$(echo "$selected_instance" | awk '{print $1}')
  instance_name=$(echo "$selected_instance" | awk '{print $2}')
  public_ip=$(echo "$selected_instance" | awk '{print $3}')
  private_ip=$(echo "$selected_instance" | awk '{print $4}')

  if [ -n "$instance_id" ]; then
    echo "Selected Instance ID: $instance_id"
    [ -n "$instance_name" ] && echo "Name: $instance_name"
    echo "Public IP: $public_ip"
    echo "Private IP: $private_ip"
  else
    echo "No instance selected. Exiting."
  fi
}

list_tf_versions() {
    local tf_dir="/opt/terraform"
    
    if [[ ! -d "$tf_dir" ]]; then
        echo "Terraform directory not found: $tf_dir"
        return 1
    fi

    echo "Available Terraform versions:"
    for version in "$tf_dir"/*; do
        [[ -d "$version" && -x "$version/terraform" ]] && echo "  $(basename "$version")"
    done
}

tf_install() {
    local tf_dir="/opt/terraform"
    local version

    # Prompt user for version
    read -r "version?Enter Terraform version to install (e.g., 1.6.0): "

    # Validate input
    if [[ -z "$version" ]]; then
        echo "No version provided. Exiting."
        return 1
    fi

    # Set download URL (Darwin + amd64)
    local os="darwin"
    local arch="amd64"
    local tf_url="https://releases.hashicorp.com/terraform/${version}/terraform_${version}_${os}_${arch}.zip"

    # Define install directory
    local install_path="${tf_dir}/${version}"

    # Check if already installed
    if [[ -d "$install_path" ]]; then
        echo "Terraform $version is already installed in $install_path"
        return 0
    fi

    # Create directory
    sudo mkdir -p "$install_path"

    # Download and extract Terraform
    echo "Downloading Terraform $version..."
    curl -fsSL -o /tmp/terraform.zip "$tf_url"

    if [[ $? -ne 0 ]]; then
        echo "Download failed. Check the version and try again."
        return 1
    fi

    sudo unzip -o /tmp/terraform.zip -d "$install_path"
    sudo chmod +x "$install_path/terraform"
    rm /tmp/terraform.zip

    echo "Terraform $version installed successfully in $install_path"
}

tf_switch() {
    local tf_dir="/opt/terraform"
    local selected_version="$1"

    # Ensure at least one version is installed
    if [[ ! -d "$tf_dir" || -z "$(ls -A "$tf_dir" 2>/dev/null)" ]]; then
        echo "No Terraform versions found in $tf_dir"
        return 1
    fi

    # If no argument is passed, use fzf for selection
    if [[ -z "$selected_version" ]]; then
        # Ensure fzf is installed
        if ! command -v fzf &> /dev/null; then
            echo "fzf is not installed. Install it via Homebrew: brew install fzf"
            return 1
        fi

        selected_version=$(ls -d "$tf_dir"/* 2>/dev/null | awk -F'/' '{print $NF}' | fzf --prompt="Select Terraform version: " --height=10 --reverse)
        
        if [[ -z "$selected_version" ]]; then
            echo "No version selected."
            return 1
        fi
    fi

    # Verify the selected version exists
    if [[ ! -d "$tf_dir/$selected_version" ]]; then
        echo "Terraform version $selected_version not found in $tf_dir"
        return 1
    fi

    # Update PATH to use the selected Terraform version
    export PATH="$tf_dir/$selected_version:$PATH"

    # Confirm switch
    echo "Switched to Terraform $selected_version"
    terraform version
}

git_configure() {
    local scope username email

    # Ask if global or local configuration
    read -r "scope?Configure Git globally (g) or locally (l)? [g/l]: "
    
    if [[ "$scope" != "g" && "$scope" != "l" ]]; then
        echo "Invalid choice. Please enter 'g' for global or 'l' for local."
        return 1
    fi

    # Prompt for username
    read -r "username?Enter your Git username: "
    if [[ -z "$username" ]]; then
        echo "Username cannot be empty."
        return 1
    fi

    # Prompt for email
    read -r "email?Enter your Git email: "
    if [[ -z "$email" ]]; then
        echo "Email cannot be empty."
        return 1
    fi

    # Set configuration scope
    local config_scope="--global"
    [[ "$scope" == "l" ]] && config_scope="--local"

    # Apply Git configuration
    git config $config_scope user.name "$username"
    git config $config_scope user.email "$email"

    echo "Git configuration updated ($([[ "$scope" == "g" ]] && echo "Global" || echo "Local")):"
    git config $config_scope --list | grep -E 'user.name|user.email'
}

# handle multi-user brew issue
unalias brew 2>/dev/null
BREWUSER=$(stat -f "%Su" $(which brew))
alias brew='sudo -Hu '${BREWUSER}' brew'

export PATH="/opt/homebrew/opt/mysql-client@8.4/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/mysql-client@8.4/lib"
export CPPFLAGS="-I/opt/homebrew/opt/mysql-client@8.4/include"

unsetopt share_history

# loading default venv
source ~/.venv/bin
